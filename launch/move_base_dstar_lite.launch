<launch>


    <node pkg="move_base" type="move_base" respawn="false" name="move_base_node" output="screen" >

        <param name="planner_frame" value="occ_map" type="string"/>
        <param name="local_planner_frame" value="odom" type="string"/>
        <param name="map_topic" value="/occ_map" type="string"/>


        <!-- load additional move_base params -->
        <rosparam file="$(find dsl_global_planner)/config/move_base.yaml" command="load" />

        <!-- load global navigation specific parameters -->
        <rosparam file="$(find dsl_global_planner)/config/common_params.yaml" command="load" ns="global_costmap" />
        <!-- <rosparam file="$(find dsl_global_planner)/config/common_params.yaml" command="load" ns="local_costmap" /> -->

        <!-- <rosparam file="$(find dsl_global_planner)/config/local_costmap_params.yaml" command="load" ns="local_costmap" /> -->


        <rosparam file="$(find dsl_global_planner)/config/global_costmap_params.yaml" command="load" ns="global_costmap" />


        <!-- use the DWA as local planner for the spencer robot -->
        <!-- <param name="base_local_planner" value="waypoint_follower/WaypointFollowerPlugin"/> -->
        <param name="base_local_planner" value="eband_local_planner/EBandPlannerROS"/>
        <!-- <param name="base_local_planner" value="waypoint_follower/WaypointFollowerPlugin"/>
        <!-- <param name="base_local_planner" value="dsl_local_planner/srl_local_plannerPlugin" /> -->
        <!--param name="base_global_planner" value="dsl_dstar_lite/DStarLiteROS"-->
        <param name="base_global_planner" value="dsl_dstar_lite/DStarLiteROS"/>


        <!--  <param name="base_local_planner" value="srl_local_planner/srl_local_plannerPlugin"/> -->


        <!-- Move Base params -->
        <param name="controller_frequency" value="10" />
        <param name="controller_patience" value="100.0" />
        <param name="planner_frequency" value="0.05" />
        <param name="recovery_behavior_enabled" value="false"/>
        
    </node>
        
    <arg name="base"       default="$(optenv TURTLEBOT_BASE kobuki)"/>  <!-- create, rhoomba -->
    <arg name="stacks"     default="$(optenv TURTLEBOT_STACKS hexagons)"/>  <!-- circles, hexagons -->
    <arg name="3d_sensor"  default="$(optenv TURTLEBOT_3D_SENSOR kinect)"/>  <!-- kinect, asus_xtion_pro -->

    <!-- Name of the map to use (without path nor extension) and initial position -->
    <arg name="map_file"       default=" $(env TURTLEBOT_STAGE_MAP_FILE)"/> <!-- robopark_plan -->
    <arg name="world_file"     default=" $(env TURTLEBOT_STAGE_WORLD_FILE)"/>
    <arg name="initial_pose_x" default="2.0"/>
    <arg name="initial_pose_y" default="2.0"/>
    <arg name="initial_pose_a" default="0.0"/>

    <param name="/use_sim_time" value="true"/>
    <!--  ******************** Stage ********************  -->
    <!-- 
        Publishes transforms:
          /base_link -> /base_laser
          /base_footprint -> /base_link (identity)
          /odom -> base_footprint
        Publishes topics:
          /odom : odometry data from the simulated odometry
          /base_scan : laser data from the simulated laser
          /base_pose_ground_truth : the ground truth pose
        Parameters:
          base_watchdog_timeout : time (s) after receiving the last command on cmd_vel before stopping the robot
        Args:
          -g : run in headless mode.
    --> 
    <node pkg="stage_ros" type="stageros" name="stageros" args="$(arg world_file)">
        <param name="base_watchdog_timeout" value="0.5"/>
        <remap from="odom" to="odom"/>
        <remap from="base_pose_ground_truth" to="base_pose_ground_truth"/>
        <remap from="cmd_vel" to="mobile_base/commands/velocity"/>
        <remap from="base_scan" to="scan"/>
    </node>

    
    
          <!--  ***************** Robot Model *****************  -->
    <include file="$(find turtlebot_bringup)/launch/includes/robot.launch.xml">
          <arg name="base" value="$(arg base)" />
          <arg name="stacks" value="$(arg stacks)" />
          <arg name="3d_sensor" value="$(arg 3d_sensor)" />
    </include>  
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
        <param name="use_gui" value="true"/>
    </node>

    <!-- Command Velocity multiplexer -->
    <node pkg="nodelet" type="nodelet" name="mobile_base_nodelet_manager" args="manager"/>
    <node pkg="nodelet" type="nodelet" name="cmd_vel_mux" args="load yocs_cmd_vel_mux/CmdVelMuxNodelet mobile_base_nodelet_manager">
    <param name="yaml_cfg_file" value="$(find turtlebot_bringup)/param/mux.yaml"/>
    <remap from="cmd_vel_mux/output" to="mobile_base/commands/velocity"/>
    </node>
    
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find turtlebot_stage)/rviz/robot_navigation.rviz"/>


</launch>
